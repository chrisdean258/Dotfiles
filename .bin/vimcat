#!/bin/bash
#!/usr/bin/env vim
#! This is a bash script that executes itself as a vimscript to do its work

: if 0
  tmpfile=$(mktemp -t vimcat.XXXXXXXX)

  [[ "${0:0:1}" == "/" ]] && script="$0" || script="$PWD/$0"

  /usr/bin/vim -e -X -R "$@" -c "source $script" -c "bufdo call TermHighlight('$tmpfile')" -c qa >/dev/null 2>/dev/null
  cat "$tmpfile"
  rm "$tmpfile"
  exit
: endif

function! TermCode(hlgroup)
  let s:term_codes = get(s:, "term_codes", {})
  let hlgroup = a:hlgroup
  if has_key(s:term_codes, hlgroup)
    return s:term_codes[hlgroup]
  endif

  let fg = synIDattr(hlgroup, 'fg', 'cterm')
  let bg = synIDattr(hlgroup, 'bg', 'cterm')
  let rv = synIDattr(hlgroup, 'reverse', 'cterm') == "" ? ";27" : ";7"
  let bd = synIDattr(hlgroup, 'bold', 'cterm') == "" ? ";22" : ";1"
  let ul = synIDattr(hlgroup, 'underline', 'cterm') == "" ? ";24" : ";4"
  let it = synIDattr(hlgroup, 'italic', 'cterm') == "" ? ";23" : ";3"
  let st = synIDattr(hlgroup, 'strike', 'cterm') == "" ? ";29" : ";9"

  let retv = "\<Esc>[25;27;28" . bd . ul . it . rv . st
  let retv .= fg == "" ? "" : ((fg < 8 ? ";3": ";38;5;" ) . fg)
  let retv .= bg == "" ? "" : ((bg < 8 ? ";4": ";48;5;" ) . bg)
  let retv .= "m"

  let s:term_codes[hlgroup] = retv

  return retv
endfunction

function! TermHighlight(out)
  let retv = []

  let last = hlID('Normal')
  for lnum in range(1, line('$'))
    let line = getline(lnum)
    let included = 0
    let parts = []

    let unconsumed = 0
    for cnum in range(1, strlen(line))
      let curid = synIDtrans(synID(lnum, cnum, 1))
      if curid == last
        continue
      endif
      if cnum > 1
        call add(parts, line[unconsumed:cnum-2])
      endif
      call add(parts, "\<Esc>[0m")
      call add(parts, TermCode(curid))
      let unconsumed = cnum - 1
      let last = curid
    endfor
    call add(parts, line[unconsumed:])
    call add(retv, join(parts, ""))
  endfor
  let retv[-1] .= "\<Esc>[0m"

  return writefile(retv, a:out)
endfunction
