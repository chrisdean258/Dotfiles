#!/bin/bash

: if 0
  tmpfile=$(mktemp -p . -t vimcat.XXXXXXXX)
  [[ "${0:0:1}" == "/" ]] && script="$0" || script="$PWD/$0"
  vim -e -X -R "$@" -c "source $script" -c "bufdo call TermHighlight('$tmpfile')" -c qa >/dev/null 2>/dev/null
  cat "$tmpfile"
  rm "$tmpfile"
  exit
: endif

let s:term_codes = {
 '0': '[25;27;28;22;24;23;27;29m',
 '57': '[25;27;28;22;24;23;27;29;35m',
 '59': '[25;27;28;22;24;23;27;29;38;5;11m',
 '71': '[25;27;28;22;24;23;27;29;38;5;15m',
 '60': '[25;27;28;22;24;23;27;29;38;5;81m',
 '73': '[25;27;28;22;24;23;27;29;38;5;15m',
 '75': '[25;27;28;22;24;23;27;29;38;5;9m',
 '55': '[25;27;28;22;24;23;27;29;36m',
 '56': '[25;27;28;22;24;23;27;29;38;5;13m'
}

function! TermCode(hlgroup)
  let hlgroup = a:hlgroup
  if has_key(s:term_codes, hlgroup)
    return s:term_codes[hlgroup]
  endif

  let fg = synIDattr(hlgroup, 'fg', 'cterm')
  let bg = synIDattr(hlgroup, 'bg', 'cterm')
  let rv = synIDattr(hlgroup, 'reverse', 'cterm') == "" ? ";27" : ";7"
  let bd = synIDattr(hlgroup, 'bold', 'cterm') == "" ? ";22" : ";1"
  let ul = synIDattr(hlgroup, 'underline', 'cterm') == "" ? ";24" : ";4"
  let it = synIDattr(hlgroup, 'italic', 'cterm') == "" ? ";23" : ";3"
  let st = synIDattr(hlgroup, 'strike', 'cterm') == "" ? ";29" : ";9"

  let retv = "\<Esc>[25;27;28" . bd . ul . it . rv . st
  let retv .= fg == "" ? "" : ((fg < 8 ? ";3": ";38;5;" ) . fg)
  let retv .= bg == "" ? "" : ((bg < 8 ? ";4": ";48;5;" ) . bg)
  let retv .= "m"

  let s:term_codes[hlgroup] = retv
  return retv
endfunction

function! TermHighlight(out)
  let lines = []
  let last = hlID('Normal')
  for lnum in range(1, line('$'))
    let line = "?" . getline(lnum)
    let parts = []
    let unconsumed = 1
    for cnum in range(2, strlen(line))
      let curid = synIDtrans(synID(lnum, cnum - 1, 1))
      if curid != last
        call add(parts, line[unconsumed:cnum-2] . "\<Esc>[0m" . TermCode(curid))
        let unconsumed = cnum - 1
        let last = curid
      endif
    endfor
    call add(parts, line[unconsumed:])
    call add(lines, join(parts, "")."\<Esc>[0m")
    let last = hlID('Normal')
  endfor
  let lines[-1] .= "\<Esc>[0m"
  call writefile([string(s:term_codes)->substitute("\e", "\\e", "g")], "temp")
  return writefile(lines, a:out)
endfunction
