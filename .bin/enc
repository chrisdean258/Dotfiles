#!/usr/bin/env python3

import base64
import sys
import os
from Crypto.Cipher import AES
from Crypto.Hash import SHA256
from Crypto import Random


def password():
    data = os.urandom(200)
    return base64.b64encode(data).decode("utf-8")[:20]


def encrypt(key, source, encode=True):
    # use SHA-256 over our key to get a proper-sized AES key
    key = SHA256.new(key).digest()
    IV = Random.new().read(AES.block_size)  # generate IV
    encryptor = AES.new(key, AES.MODE_CBC, IV)
    # calculate needed padding
    padding = AES.block_size - len(source) % AES.block_size
    source += bytes([padding]) * padding
    # store the IV at the beginning and encrypt
    data = IV + encryptor.encrypt(source)
    return base64.b64encode(data) if encode else data


pwd = sys.argv[1] if len(sys.argv) == 4 else password()
infile = sys.argv[-2]
outfile = sys.argv[-1]

with open(infile, "rb") as f:
    data = encrypt(pwd.encode("utf-8"), f.read())

with open(outfile, "wb") as f:
    f.write(data)

print(pwd)
