#!/usr/bin/env python3
import sys
from sh import arandr, xrandr


class Monitor:
    def __init__(self, name, width=0, height=0, offx=0, offy=0, primary=False):
        self.__dict__.update(locals())
        self.modes = []

    @classmethod
    def getdisplays(cls):
        lines = [line for line in xrandr().split("\n")[1:] if line]
        mon_lines = [a for a in enumerate(lines) if " connected" in a[1]]
        con_mons = []

        for i, line in mon_lines[:-1]:
            con_mons.append(cls.xrandr_parse_display(line))
            modelines = lines[i + 1:mon_lines[i + 1][0]]
            con_mons[-1].modes = cls.parse_modes(modelines)

        con_mons.append(cls.xrandr_parse_display(mon_lines[-1][1]))
        modelines = lines[mon_lines[-1][0] + 1:]
        con_mons[-1].modes = cls.parse_modes(modelines)

        dmon_lines = [a.split() for a in lines if " disconnected" in a]
        dcon_mons = [cls(a[0]) for a in dmon_lines if not a[2].startswith("(")]
        return con_mons, dcon_mons

    @staticmethod
    def parse_modes(lines):
        return [tuple(line.split()[0].split("x")) for line in lines]

    @classmethod
    def xrandr_parse_display(cls, line):
        fields = line.split()
        name = fields[0]
        primary = False
        loc = fields[2]
        if fields[2] == "primary":
            primary = True
            loc = fields[3]

        if loc.startswith("("):
            return cls(name)
        loc = loc.replace("x", "+")
        w, h, offx, offy, *rest = loc.split("+") + [0, 0]
        return cls(name, int(w), int(h), int(offx), int(offy), primary)

    def size(self):
        if self.width and self.height:
            return self.width, self.height
        return self.modes[0]


def _xrandr(*args, **kwargs):
    call = xrandr.bake(*args, **kwargs)
    print(call)
    call()


def extend(displays, true_size=False, no4k=False):
    if len(displays) == 1:
        if no4k:
            pw, ph = displays[0].size()
            pw = min(pw, 1920)
            ph = min(ph, 1080)
            _xrandr("--output", displays[0].name, "--primary",
                    "--mode", f"{pw}x{ph}")
        else:
            _xrandr("--output", displays[0].name, "--primary", "--auto")

    if len(displays) == 2:
        try:
            primary = [a for a in displays if a.primary][0]
            second = [a for a in displays if not a.primary][0]
        except IndexError:
            primary, second = sorted(displays, key=lambda s: -s.width)
        pw, ph = primary.size()
        sw, sh = second.size()

        _xrandr("--output", second.name, "--auto", "--right-of",
                primary.name, "--output", primary.name,
                "--primary", "--auto")

        if true_size:
            sw, sh = second.modes[0]
            _xrandr("--output", second.name, "--scale", "1x1",
                    "--panning", "{}x{}+{}+0".format(sw, sh, pw),
                    "--mode", f"{sw}x{sh}")
        elif no4k:
            pw, ph = min(pw, 1920), min(ph, 1080)
            sw, sh = min(sw, 1920), min(sh, 1080)
            _xrandr("--output", second.name, "--mode", f"{sw}x{sh}",
                    "--right-of", primary.name, "--output", primary.name,
                    "--mode", f"{pw}x{ph}")

        elif second.width < primary.width:
            _xrandr("--output", second.name, "--scale", "2x2",
                    "--panning", "{}x{}+{}+0".format(pw, ph, pw))


def mirror(displays):
    if len(displays) == 2:
        primary = [a for a in displays if a.primary][0]
        second = [a for a in displays if not a.primary][0]
        _xrandr("--output", second.name, "--auto", "--same-as",
                primary.name, "--output", primary.name,
                "--primary", "--auto")
        _xrandr("--output", primary.name, "--mode",
                f"{second.width}x{second.height}")


def remove(displays):
    for d in displays:
        _xrandr("--output", d.name, "--off")


def main(argv):
    displays, disconnected = Monitor.getdisplays()

    args = set(arg for arg in argv[1:] if not arg.startswith("-"))
    opts = set(arg for arg in argv[1:] if arg.startswith("-"))

    if "--keep-dead" not in opts and "-k" not in opts:
        remove(disconnected)
    if len(args) == 0:
        extend(displays, "--true-size" in opts, "--no4k" in opts)
    elif "mirror" == args.pop():
        mirror(displays)
    else:
        arandr()


if __name__ == "__main__":
    try:
        main(sys.argv)
    except Exception as e:
        print(str(e))
