#!/usr/bin/env python3
import argparse
import re
import sys
from subprocess import check_output as run



def xrandr(*args):
    print(["xrandr", *args])
    return run(["xrandr", *args], text=True).splitlines()


class Monitor:
    def __init__(self, name, width=0, height=0, offx=0, offy=0, primary=False):
        self.__dict__.update(locals())
        self.modes = []

    def size(self):
        if (self.width and self.height) or len(self.modes) == 0:
            return self.width, self.height
        return self.modes[0]

    def get_no_4k_size(self):
        rw, rh = self.modes[0]
        tw = 1920
        th = (tw * rh) // rw
        for ww, hh in self.modes:
            if ww <= tw and hh <= th:
                return ww, hh

    @classmethod
    def getdisplays(cls):
        lines = [line for line in xrandr()[1:] if line]
        con, dcon, cur_mon = [], [], None
        for l in lines:
            match = re.match(r"^\s*(\d+)x(\d+)", l)
            if cur_mon is not None and match is not None:
                cur_mon.modes.append(list(map(int, match.groups())))
            elif not l[0].isspace():
                cur_mon = cls.xrandr_parse_display(l)
                (con if " connected" in l else dcon).append(cur_mon)
        return sorted(con, key=lambda m: not m.primary), dcon

    @classmethod
    def xrandr_parse_display(cls, line):
        name, _, *fields = line.split()
        primary = fields[0] == "primary"
        loc = fields[1] if primary else fields[0]

        if loc.startswith("("):
            return cls(name)
        w, h, offx, offy, *_ = map(int, re.findall(r"\d+", loc) + [0, 0])
        return cls(name, w, h, offx, offy, primary)


    def set_primary(self, true_size=False, no4k=False):
        w, h = self.size()
        if no4k:
            w, h = self.get_no_4k_size()
        if true_size:
            w, h = self.modes[0]
        xrandr("--output", self.name, "--primary", "--mode", f"{w}x{h}")


def extend(displays, true_size=False, no4k=False):
    if len(displays) == 1:
        displays[0].set_primary(true_size, no4k)

    if len(displays) == 2:
        primary, second = displays
        (pw, ph), (sw, sh) = primary.size(), second.size()
        xrandr("--output", second.name, "--auto", "--right-of", primary.name,
               "--output", primary.name, "--primary", "--auto")

        if true_size:
            sw, sh = second.modes[0]
            xrandr("--output", second.name, "--scale", "1x1", "--panning",
                   f"{sw}x{sh}+{pw}+0", "--mode", f"{sw}x{sh}")
        elif no4k:
            pw, ph = primary.get_no_4k_size()
            sw, sh = second.get_no_4k_size()
            xrandr("--output", second.name, "--mode", f"{sw}x{sh}",
                   "--right-of", primary.name, "--output", primary.name,
                   "--mode", f"{pw}x{ph}")
        elif second.width < primary.width:
            xrandr("--output", second.name, "--scale", "2x2", "--panning",
                   f"{pw}x{ph}+{pw}+0")


def mirror(displays):
    if len(displays) == 2:
        primary, second = displays
        xrandr("--output", second.name, "--auto", "--same-as", primary.name,
               "--output", primary.name, "--primary", "--auto")
        xrandr("--output", primary.name, "--mode",
               f"{second.width}x{second.height}")


def remove(displays):
    for d in displays:
        xrandr("--output", d.name, "--off")


def main():
    parser = argparse.ArgumentParser(description='Manage monitors')
    parser.add_argument('--keep-dead', '-k',  action="store_true", help="Don't remove disconnected monitors") #noqa:E501
    parser.add_argument('--true-size', action='store_true', help="revert to monitor true size") #noqa:E501
    parser.add_argument('--no-4k', action='store_true', help="Restrice output size to something reasonable") #noqa:E501
    sp = parser.add_subparsers(title="action", dest="mode")
    parser.set_defaults(mode="extend")
    sp.add_parser("extend", help="[Default] extend the monitor")
    sp.add_parser("mirror", help="mirror the monitor")
    args = parser.parse_args()

    displays, disconnected = Monitor.getdisplays()

    if not args.keep_dead:
        remove(disconnected)

    if args.mode == "extend":
        extend(displays, args.true_size, args.no_4k)
    elif args.mode == "mirror":
        mirror(displays)


if __name__ == "__main__":
    main()
