#!/usr/bin/env python3
import sys
from sh import arandr, xrandr


class Monitor:
    def __init__(self, name, width, height, offx, offy, primary):
        self.__dict__.update(locals())

    @staticmethod
    def getdisplays():
        lines = [line for line in xrandr().split("\n") if " connected" in line]
        return [Monitor.xrandr_parse_display(a) for a in lines]

    @classmethod
    def xrandr_parse_display(cls, line):
        fields = line.split()
        name = fields[0]
        primary = False
        loc = fields[2]
        if fields[2] == "primary":
            primary = True
            loc = fields[3]

        loc = loc.replace("x", "+")
        width, height, offx, offy, *rest = loc.split("+") + [0, 0]
        return cls(name, width, height, offx, offy, primary)


def _xrandr(*args, **kwargs):
    call = xrandr.bake(*args, **kwargs)
    print(call)
    call()


def extend(displays):
    if len(displays) == 1:
        _xrandr("--output", displays[0].name, "--primary", "--auto")
    if len(displays) == 2:
        primary = [a for a in displays if a.primary][0]
        second = [a for a in displays if not a.primary][0]

        if primary.width <= second.width and 0:
            print(primary.width, second.width)
            _xrandr("--output", second.name, "--auto", "--right-of",
                    primary.name, "--output", primary.name,
                    "--primary", "--auto")
        else:
            w, h = primary.width, primary.height
            _xrandr("--output", second.name, "--scale", "2x2",
                    "--panning", "{}x{}+{}+0".format(w, h, w))


def mirror(displays):
    if len(displays) == 2:
        primary = [a for a in displays if a.primary][0]
        second = [a for a in displays if not a.primary][0]
        _xrandr("--output", second.name, "--auto", "--same-as",
                primary.name, "--output", primary.name,
                "--primary", "--auto")
        _xrandr("--output", primary.name, "--mode",
                f"{second.width}x{second.height}")


def main(argv):
    displays = Monitor.getdisplays()
    if len(argv) == 1:
        extend(displays)
    elif argv[1] == "mirror":
        mirror(displays)
    else:
        arandr()


if __name__ == "__main__":
    main(sys.argv)
