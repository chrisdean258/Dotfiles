#!/usr/bin/env python3
import sys
import re
from subprocess import check_output as run


def xrandr(*args):
    return run(["xrandr"] + list(args)).decode("utf-8").splitlines()


class Monitor:
    def __init__(self, name, width=0, height=0, offx=0, offy=0, primary=False):
        self.__dict__.update(locals())
        self.modes = []

    def size(self):
        if (self.width and self.height) or len(self.modes) == 0:
            return self.width, self.height
        return self.modes[0]

    @classmethod
    def getdisplays(cls):
        lines = [line for line in xrandr()[1:] if line]
        con, dcon, cur_mon = [], [], None
        for l in lines:
            if cur_mon is not None and re.match(r"^\s*\d+x\d+", l):
                l = l.split()[0].rstrip("i").split("x")
                cur_mon.modes.append([int(a) for a in l])
            elif not l[0].isspace():
                cur_mon = cls.xrandr_parse_display(l)
                (con if " connected" in l else dcon).append(cur_mon)
        return sorted(con, key=lambda m: not m.primary), dcon

    @classmethod
    def xrandr_parse_display(cls, line):
        name, _, *fields = line.split()
        primary = fields[0] == "primary"
        loc = fields[1] if primary else fields[0]

        if loc.startswith("("):
            return cls(name)
        w, h, offx, offy, *_ = loc.replace("x", "+").split("+") + [0, 0]
        return cls(name, int(w), int(h), int(offx), int(offy), primary)


def extend(displays, true_size=False, no4k=False):
    if len(displays) == 1:
        w, h = displays[0].size()
        if no4k:
            w, h = min(w, 1920), min(h, 1080)
        if true_size:
            w, h = displays[0].modes[0]
        xrandr("--output", displays[0].name, "--primary", "--mode", f"{w}x{h}")

    if len(displays) == 2:
        primary, second = displays
        (pw, ph), (sw, sh) = primary.size(), second.size()
        xrandr("--output", second.name, "--auto", "--right-of", primary.name,
               "--output", primary.name, "--primary", "--auto")

        if true_size:
            sw, sh = second.modes[0]
            xrandr("--output", second.name, "--scale", "1x1", "--panning",
                   f"{sw}x{sh}+{pw}+0", "--mode", f"{sw}x{sh}")
        elif no4k:
            pw, ph = min(pw, 1920), min(ph, 1080)
            sw, sh = min(sw, 1920), min(sh, 1080)
            xrandr("--output", second.name, "--mode", f"{sw}x{sh}",
                   "--right-of", primary.name, "--output", primary.name,
                   "--mode", f"{pw}x{ph}")
        elif second.width < primary.width:
            xrandr("--output", second.name, "--scale", "2x2", "--panning",
                   "{}x{}+{}+0".format(pw, ph, pw))


def mirror(displays):
    if len(displays) == 2:
        primary, second = displays
        xrandr("--output", second.name, "--auto", "--same-as", primary.name,
               "--output", primary.name, "--primary", "--auto")
        xrandr("--output", primary.name, "--mode",
               f"{second.width}x{second.height}")


def remove(displays):
    for d in displays:
        xrandr("--output", d.name, "--off")


def main(argv):
    displays, disconnected = Monitor.getdisplays()

    args = set(arg for arg in argv[1:] if not arg.startswith("-"))
    opts = set(arg for arg in argv[1:] if arg.startswith("-"))

    if "--keep-dead" not in opts and "-k" not in opts:
        remove(disconnected)
    if len(args) == 0:
        extend(displays, "--true-size" in opts, "--no4k" in opts)
    elif "mirror" == args.pop():
        mirror(displays)
    else:
        run("arandr")


if __name__ == "__main__":
    main(sys.argv)
    try:
        pass
    except Exception as e:
        print(str(e))
