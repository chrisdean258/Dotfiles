#!/usr/bin/env python3

import click
import getpass
import os
import re
import requests
import simplejson
from contextlib import suppress
from sh import git


USER = None
PASSWORD = None
ACCESS_TOKEN = None
AUTH = None
BASEURL = "https://api.github.com/"


class InvalidRequestStatus(Exception):
    def __init__(self, resp):
        super().__init__(f"status code = {resp.status_code}\n{resp.text}")


def user():
    global USER
    if not USER:
        try:
            USER = git.config("user.username").strip()
        except Exception:
            email = git.config("user.email").strip()
            USER = email[:email.index("@")]
    return USER


def access():
    global ACCESS_TOKEN
    if not ACCESS_TOKEN:
        ACCESS_TOKEN = os.environ.get("GITHUB_ACCESS_TOKEN")
    if ACCESS_TOKEN:
        return {'Authorization': f'token {ACCESS_TOKEN}'}
    return None


def auth():
    global PASSWORD
    if ACCESS_TOKEN:
        return None
    if not PASSWORD:
        PASSWORD = getpass.getpass()
    return (user(), PASSWORD)


def Request(callback, url, *args, **kwargs):
    head = access()
    resp = callback(BASEURL + url, *args, **kwargs, headers=head, auth=auth())
    if resp.status_code // 100 != 2:
        raise InvalidRequestStatus(resp)
    return resp.json()


def Post(url, json):
    return Request(requests.post, url, json=json)


def Get(url):
    return Request(requests.get, url)


def Delete(url):
    with suppress(simplejson.errors.JSONDecodeError):
        return Request(requests.delete, url)


@click.group()
@click.option(
    "--username", "-u",

    default=user,
    help="Github username"
)
@click.option(
    "--password", "-p",
    help="Github password"
)
@click.option(
    "--access-token", "-t",
    help="Github password"
)
def main(username, password, access_token):
    global USER
    global PASSWORD
    global ACCESS_TOKEN
    if username:
        USER = username
    if password:
        PASSWORD = password
    if access_token:
        ACCESS_TOKEN = access_token


@main.command("new-repo")
@click.argument("name")
@click.argument("dirname", required=False)
@click.option("--private", "-p", is_flag=True, help="Create private repo")
def NewRepo(name, dirname=None, private=False):
    """ Create new github repo """
    dirname = dirname or name
    data = {"name": name, "private": private}

    resp = Post("user/repos", data)

    print(f"Name: {resp['name']}")
    print(f"Full Name: {resp['full_name']}")
    print(f"SSH URL: {resp['ssh_url']}")
    print(f"Clone URL: {resp['clone_url']}")

    os.mkdir(dirname)
    os.chdir(dirname)

    title = name.replace("-", " ").replace("_", " ")
    title = re.sub(r"(?<=\w)([A-Z])", r" \1", title).title()

    with open("README.md", "w") as readme, open(".gitignore", "w"):
        readme.write(f"# {title}")

    git.init()
    git.remote.add.origin(f"git@github.com:{user()}/{name}.git")
    git.add("-A", ".")
    git.commit("-m", "Initial commit")
    git.push("-u", "origin", "master")

    os.chdir("..")


@main.command("list-repos")
def ListRepos():
    """ List github repos """
    resp = Get("user/repos")
    for repo in resp:
        print(repo["full_name"])


@main.command()
def ls():
    """ Alias for list-repos """
    resp = Get("user/repos")
    for repo in resp:
        print(repo["full_name"])


@main.command()
@click.argument("name")
@click.argument("to", required=False)
def clone(name, to=None):
    """ Clone a github repo by partial name match """
    resp = Get("user/repos")
    for repo in resp:
        if name.casefold() in repo["full_name"].casefold():
            print("Cloning", repo["full_name"])
            to = to or repo["name"]
            git.clone(repo["ssh_url"], to)


@main.command("delete-repo")
@click.argument("name")
def DeleteRepo(name):
    """ Delete github repo """
    Delete(f"repos/{user()}/{name}")


if __name__ == "__main__":
    try:
        main()
    except Exception as e:
        print(str(e))
        raise e
        exit(1)
