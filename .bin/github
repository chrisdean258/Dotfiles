#!/usr/bin/env python3

import click
import getpass
import os
import re
import requests
import simplejson
from contextlib import suppress
from sh import git


PASSWORD = None
GH_TOKEN = os.environ.get("GITHUB_ACCESS_TOKEN")
GH_HEADER = GH_TOKEN and {'Authorization': f'token {GH_TOKEN}'}
GH_URL = "https://api.github.com/"
EMAIL = git.config("user.email").strip()
USER = EMAIL[:EMAIL.index("@")]


def get_auth():
    global PASSWORD
    global GH_TOKEN
    if GH_TOKEN:
        return None
    PASSWORD = PASSWORD or getpass.getpass()
    return (USER, PASSWORD)


def Request(callback, url, headers=None, auth=None, **kwargs):
    resp = callback(
        GH_URL + url,
        headers=headers or GH_HEADER,
        auth=auth or get_auth(),
        **kwargs)
    return resp.json()


def Post(url, json):
    return Request(requests.post, url, json=json)


def Get(url):
    return Request(requests.get, url)


def Delete(url):
    with suppress(simplejson.errors.JSONDecodeError):
        return Request(requests.delete, url)


@click.group()
@click.option("--username", "-u", default=USER, help="Github username")
@click.option("--access-token", "-t", help="Github password")
def main(username, access_token):
    global USER
    global GH_TOKEN
    global GH_HEADER
    USER = username or USER
    GH_TOKEN = access_token or GH_TOKEN
    GH_HEADER = GH_TOKEN and {'Authorization': f'token {GH_TOKEN}'}


@main.command("new-repo")
@click.argument("name")
@click.argument("dirname", required=False)
@click.option("--private", "-p", is_flag=True, help="Create private repo")
def NewRepo(name, dirname=None, private=False):
    """ Create new github repo """
    global USER
    dirname = dirname or name
    data = {"name": name, "private": private}

    resp = Post("user/repos", data)

    print(f"Name: {resp['name']}")
    print(f"Full Name: {resp['full_name']}")
    print(f"SSH URL: {resp['ssh_url']}")
    print(f"Clone URL: {resp['clone_url']}")

    os.mkdir(dirname)
    os.chdir(dirname)

    title = name.replace("-", " ").replace("_", " ")
    title = re.sub(r"(?<=\w)([A-Z])", r" \1", title).title()
    with open("README.md", "w") as readme:
        readme.write(f"# {title}")

    git.init()
    git.remote.add.origin(f"git@github.com:{USER}/{name}.git")
    git.add("-A", ".")
    git.commit("-m", "Initial commit")
    git.push("-u", "origin", "master")


@main.command("list-repos")
def ListRepos():
    """ List github repos """
    resp = Get("user/repos")
    for repo in resp:
        print(repo["full_name"])


@main.command()
def ls():
    """ Alias for list-repos """
    resp = Get("user/repos")
    for repo in resp:
        print(repo["full_name"])


@main.command()
@click.argument("name")
@click.argument("to", required=False)
def clone(name, to=None):
    """ Clone a github repo by partial name match """
    resp = Get("user/repos")
    for repo in (a for a in resp if name.lower() in a["name"].lower()):
        print("Cloning", repo["full_name"])
        to = to or repo["name"]
        git.clone(repo["ssh_url"], to)


@main.command("delete-repo")
@click.argument("name")
def DeleteRepo(name):
    """ Delete github repo """
    global USER
    Delete(f"repos/{USER}/{name}")


if __name__ == "__main__":
    try:
        main()
    except Exception as e:
        print(str(e))
        raise e
        exit(1)
