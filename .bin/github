#!/usr/bin/env python3

import click
import getpass
import os
import json
import re
import requests
from sh import git


QUIET = False
USER = None
PASSWORD = None
AUTH = None
BASEURL = "https://api.github.com/"


def user():
    global USER
    if not USER:
        try:
            USER = git.config("user.username").strip()
        except Exception:
            email = git.config("user.email").strip()
            USER = email[:email.index("@")]
    return USER


def auth():
    global PASSWORD
    if not PASSWORD:
        PASSWORD = getpass.getpass()
    return (user(), PASSWORD)


def Request(callback, url, *args, **kwargs):
    resp = callback(BASEURL + url, *args, **kwargs, auth=auth())
    if resp.status_code // 100 != 2:
        raise Exception(f"status code = {resp.status_code}\n{resp.text}")
    items = {}
    try:
        items = json.loads(resp.text)
    finally:
        return items


def Post(url, json):
    return Request(requests.post, url, json=json)


def Get(url):
    return Request(requests.get, url)


def Delete(url):
    return Request(requests.delete, url)


@click.group()
@click.option(
    "--username", "-u",
    default=user,
    help="Github username"
)
@click.option(
    "--password", "-p",
    default=getpass.getpass,
    help="Github password"
)
def main(username, password):
    global USER
    global PASSWORD
    if username:
        USER = username
    if password:
        PASSWORD = password


@main.command("new-repo")
@click.argument("name")
@click.argument("dirname", required=False)
@click.option("--private", "-p", is_flag=True, help="Create private repo")
def NewRepo(name, dirname=None, private=False):
    """ Create new github repo """
    if dirname is None:
        dirname = name
    data = {"name": name, "private": private}

    resp = Post("user/repos", data)

    if not QUIET:
        print(f"Name: {resp['name']}")
        print(f"Full Name: {resp['full_name']}")
        print(f"SSH URL: {resp['ssh_url']}")
        print(f"Clone Url: {resp['clone_url']}")

    os.mkdir(dirname)
    os.chdir(dirname)

    title = name.replace("-", " ").replace("_", " ")
    title = re.sub(r"(?<=\w)([A-Z])", r" \1", title).title()

    with open("README.md", "w") as f:
        f.write(f"# {title}")
    open(".gitignore").close()

    git.init()
    git.remote.add.origin(f"git@github.com:{user()}/{name}.git")
    git.add("-A", ".")
    git.commit("-m", "Initial commit")
    git.push("-u", "origin", "master")

    os.chdir("..")


@main.command("list-repos")
def ListRepos():
    """ List github repos """
    resp = Get("user/repos")
    for repo in resp:
        print(repo["full_name"])


@main.command()
def ls():
    """ Alias fort list-repos """
    resp = Get("user/repos")
    for repo in resp:
        print(repo["full_name"])


@main.command("delete-repo")
@click.argument("name")
def DeleteRepo(name):
    """ Delete github repo """
    Delete(f"repos/{user()}/{name}")


if __name__ == "__main__":
    try:
        main()
    except Exception as e:
        print(str(e))
        exit(1)
