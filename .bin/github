#!/usr/bin/env python3

import os
import re
import requests
import json
from sh import git
from functools import wraps
import sys


def json_resp(f):
    @wraps(f)
    def inner(*args, **kwargs):
        resp = f(*args, **kwargs)
        if resp.text:
            return json.loads(resp.text)
        return None
    return inner


class Github:
    def __init__(self, username, access_token, url):
        self.username = username
        self.access_token = access_token
        self.url = url
        self.header = {'Authorization': 'token ' + access_token}

    @json_resp
    def post(self, url, json):
        return requests.post(self.url + url, headers=self.header, json=json)

    @json_resp
    def get(self, url):
        return requests.get(self.url + url, headers=self.header)

    @json_resp
    def delete(self, url):
        return requests.delete(self.url + url, headers=self.header)

    def new_repo(self, name, private):
        return self.post("user/repos", {"name": name, "private": private})

    def list_repos(self):
        return self.get("user/repos")

    def delete_repo(self, name):
        self.delete("repos/{}/{}".format(self.username, name))

    def setup_repo(self, name, dirname, private):
        resp = self.new_repo(name, private)

        os.mkdir(dirname)
        os.chdir(dirname)

        title = name.replace("-", " ").replace("_", " ")
        title = re.sub(r"(?<=\w)([A-Z])", r" \1", title).title()
        with open("README.md", "w") as readme:
            readme.write("# " + title)

        git.init()
        git.remote.add.origin(resp["ssh_url"])
        git.add("-A", ".")
        git.commit("-m", "Initial commit")
        git.push("-u", "origin", "master")

        return resp

        # print("Name:", resp['name'])
        # print("Full Name:", resp['full_name'])
        # print("SSH URL:", resp['ssh_url'])
        # print("Clone URL:", resp['clone_url'])
        # for repo in resp:
        # print(repo["full_name"])

    def clone_repo(self, name, directory):
        for repo in self.list_repos():
            if name.lower() in repo["name"].lower():
                git.clone(repo["ssh_url"], directory)
                return repo


def main(args):
    email = git.config("user.email").strip()
    username = email[:email.index("@")]
    token = os.environ.get("GITHUB_ACCESS_TOKEN")
    url = "https://api.github.com/"
    connection = Github(username, token, url)

    if args[1] in ("ls", "list"):
        for repo in connection.list_repos():
            print(repo["full_name"])
    if args[1] == "clone":
        connection.clone_repo(args[2], args[2] if len(args) <= 3 else args[3])
    if args[1] == "delete":
        connection.delete_repo(args[2])
    if args[1] == "new":
        connection.setup_repo(args[2], )


if __name__ == "__main__":
    try:
        main(sys.argv)
    except Exception as e:
        print(str(e))
        exit(1)
