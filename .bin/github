#!/usr/bin/env python3

import os
import re
import requests
import json
import subprocess
from functools import wraps
import sys


def json_resp(f):
    @wraps(f)
    def inner(*args, **kwargs):
        return json.loads(f(*args, **kwargs).text or "null")
    return inner


def git(*cmd):
    return subprocess.check_output(["git", *cmd]).decode("utf-8")


class Github:
    def __init__(self, username, access_token, url):
        self.username = username
        self.access_token = access_token
        self.url = url
        self.header = {'Authorization': 'token ' + access_token}

    @json_resp
    def post(self, url, json):
        return requests.post(self.url + url, headers=self.header, json=json)

    @json_resp
    def get(self, url):
        return requests.get(self.url + url, headers=self.header)

    @json_resp
    def delete(self, url):
        return requests.delete(self.url + url, headers=self.header)

    def new_repo(self, name, private):
        return self.post("user/repos", {"name": name, "private": private})

    def list_repos(self):
        return self.get("user/repos?per_page=1000")

    def delete_repo(self, name):
        self.delete("repos/{}/{}".format(self.username, name))

    def setup_repo(self, name, dirname, private):
        resp = self.new_repo(name, private)

        try:
            os.mkdir(dirname)
        except FileExistsError:
            pass

        os.chdir(dirname)

        if not os.path.isfile("README.md"):
            title = name.replace("-", " ").replace("_", " ")
            title = re.sub(r"(?<=\w)([A-Z])", r" \1", title).title()
            with open("README.md", "w") as f:
                print("# " + title, file=f)

        git("init")
        git("co", "-b", "main")
        git("remote", "add", "origin", resp["ssh_url"])
        git("add", "-A", ".")
        git("commit", "-m", "Initial commit")
        git("push", "-u", "origin", "main")

        return resp

    def clone_repo(self, name, directory):
        for repo in self.list_repos():
            if name.lower() in repo["name"].lower():
                git("clone", repo["ssh_url"], directory)
                return repo


def main(args):
    email = git("config", "user.email").strip()
    username = email[:email.index("@")]
    token = os.environ.get("GITHUB_ACCESS_TOKEN")
    url = "https://api.github.com/"
    connection = Github(username, token, url)

    if len(args) == 1:
        print("Usage: github action", file=sys.stderr)
        print("  actions:", file=sys.stderr)
        print("    ls,list", file=sys.stderr)
        print("    clone repo-name", file=sys.stderr)
        print("    delete repo-name", file=sys.stderr)
        print("    new,new-repo repo-name", file=sys.stderr)

    elif args[1] in ("ls", "list"):
        for repo in connection.list_repos():
            if repo["owner"]["login"] == username or (len(args) > 2 and args[2] == "-a"):
                print(repo["full_name"])
    elif args[1] == "clone":
        connection.clone_repo(args[2], args[2] if len(args) <= 3 else args[3])
    elif args[1] == "delete":
        connection.delete_repo(args[2])
    elif args[1] in ("new", "new-repo"):
        resp = connection.setup_repo(args[2], args[2], "-p" in args)
        print("SSH URL:", resp['ssh_url'])


if __name__ == "__main__":
    main(sys.argv)
    try:
        pass
    except Exception as e:
        print(str(e))
        exit(1)
        raise e
