#!/usr/bin/env python3
import imaplib
import email
import os
import sys
import csv
import datetime
import tempfile
import re
from itertools import zip_longest as zipl
from getpass import getpass
from sh import git


class Activity:
    categories = [
        "Sleep",
        "Shower",
        "Travel",
        "TV",
        "Research",
        "Coding",
        "Video Games",
        "Food",
        "Friends",
        "Reddit",
        "Youtube",
        "Shopping"
        "Class"
        ]

    header = [
        "start_time", "end_time", "location",
        "category", "activity", "people"]

    def __init__(self):
        self.start_time = ""
        self.end_time = ""
        self.category = ""
        self.location = ""
        self.activity = ""
        self.people = []

    def __repr__(self):
        return repr(self.__dict__)

    def as_list(self):
        return [
            self.start_time,
            self.end_time,
            self.location.strip(),
            self.category,
            self.activity.strip(),
            ",".join(self.people)
            ]

    @classmethod
    def from_csv_line(cls, line):
        if len(line) != 6:
            print(line)
        inst = cls()
        inst.start_time = line[0]
        inst.end_time = line[1]
        inst.location = line[2]
        inst.category = line[3]
        inst.activity = line[4]
        inst.people = line[5].split(",")
        return inst

    @classmethod
    def from_csv(cls, filename, delimiter=","):
        with open(filename, "r") as csvfile:
            next(csvfile)
            reader = csv.reader(csvfile, delimiter=delimiter)
            return [Activity.from_csv_line(a) for a in reader]

    @staticmethod
    def to_csv(activities, filename, delimiter=","):
        for a1, a2 in zip(activities, activities[1:]):
            a2.start_time = a1.end_time
            if a2.location == "":
                a2.location = a1.location

        with open(filename, 'w', newline='') as csvfile:
            csvwriter = csv.writer(csvfile, delimiter=delimiter)
            csvwriter.writerow(Activity.header)
            for activity in activities:
                csvwriter.writerow(activity.as_list())

    @classmethod
    def parse_tasker(cls, line):
        date, _, line = line.partition(" ")
        time, _, line = line.partition(" ")

        regex = "(" + "|".join((" with ", " at ", " ending ")) + ")"
        pieces = re.split(regex, line)
        activity = pieces[0]
        args = dict(zip(pieces[1::2], pieces[2::2]))
        location = args.get(" at ", "")
        people = [a.strip().title() for a in args.get(" with ", "").split(",")]
        time = args.get(" ending ", time)

        mon, day, yr = [int(a) for a in date.split("-")]
        hr, m = [int(a) for a in re.split(r":|\.", time)]
        yr = 2000 + yr
        dt = datetime.datetime(year=yr, month=mon, day=day, hour=hr, minute=m)
        end_time = dt.strftime("%Y-%m-%d %H:%M")
        cat = "misc"
        for category in reversed(Activity.categories):
            if category.lower() in activity.lower():
                cat = category

        act = cls()
        act.location = location
        act.end_time = end_time
        act.category = cat
        act.activity = activity
        act.people = people
        print(act)

        return act

    @staticmethod
    def to_columns(activities, filename):
        for a1, a2 in zip(activities, activities[1:]):
            a2.start_time = a1.end_time
            if a2.location == "":
                a2.location = a1.location
        offsets = []
        for items in activities:
            items = items.as_list()
            lens = (len(a) for a in items)
            offsets = [max(a, b) for a, b in zipl(lens, offsets, fillvalue=0)]
        with open(filename, "w") as f:
            formatted = (f"{i:{l}}" for i, l in zip(Activity.header, offsets))
            print(" | ".join(formatted), file=f)
            for items in activities:
                items = items.as_list()
                formatted = (f"{i:{l}}" for i, l in zip(items, offsets))
                print(" | ".join(formatted), file=f)

    @staticmethod
    def from_columns(filename):
        with open(filename, "r") as f:
            next(f)
            items = [[item.strip() for item in l.split(" | ")] for l in f]
        return [Activity.from_csv_line(item) for item in items]


def get_new_activities():
    # Login
    con = imaplib.IMAP4_SSL("imap.gmail.com", 993)
    con.login("chrisdean258@gmail.com", os.environ.get("email_") or getpass())

    # Select mailbox and search
    con.select('"[Gmail]/All Mail"')
    result, msgs = con.search(None, "Subject", '"TimeTrackerflush"')

    # Get last message Number and query for message
    mail_num = msgs[0].split()[-1]
    typ, data = con.fetch(mail_num, '(RFC822)')

    # Read email and return resulting activities
    mail = email.message_from_bytes(data[0][1])
    body = mail.get_payload(None, True).decode('utf-8')
    return body.split("\r\n")


def main():
    print("Gathering new activities...", end="", flush=True)
    new_activities = [Activity.parse_tasker(a) for a in get_new_activities()]
    print("Done\nGathering old activities...", end="", flush=True)
    old_activities = Activity.from_csv("time-tracking.csv")
    print("Done")

    if old_activities[-1].end_time >= new_activities[0].end_time:
        if input("Possibly reprocessing activities. Quit[Y/n]? ") != "n":
            sys.exit(1)

    new_activities[0].start_time = old_activities[-1].end_time
    if not new_activities[0].location:
        new_activities[0].location = old_activities[-1].location

    temp_file = tempfile.NamedTemporaryFile(mode="r")
    Activity.to_columns(new_activities, temp_file.name)
    if os.system(f'vim "{temp_file.name}"') != 0:
        sys.exit(1)
    new_activities = Activity.from_columns(temp_file.name)
    activities = old_activities + new_activities
    Activity.to_csv(activities, "time-tracking.csv")


if __name__ == "__main__":
    HOME = os.environ["HOME"]
    os.chdir(HOME + "/git/personal_notes")
    git.pull()

    main()

    print("Committing new activities...", end="", flush=True)
    git.add("time-tracking.csv")
    git.commit(m="time tracking update")
    git.push()
    print("Done")
