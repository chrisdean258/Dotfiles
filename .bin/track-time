#!/usr/bin/env python3

import sys
import os
import json
import datetime
import re
from sh import git, tt_dump


def usage():
    print("Usage: track-time", file=sys.stderr)
    sys.exit(1)


def time():
    now = datetime.datetime.now()
    hour, _, minute = input("End time: ").partition(":")
    if not hour:
        return None
    hour = int(hour)
    minute = int(minute or 0)

    day_offset = 0
    if "-o" in sys.argv:
        ind = sys.argv.index("-o") + 1
        day_offset = -int(sys.argv[ind])
    end_time = now + datetime.timedelta(days=day_offset)
    end_time = end_time.replace(hour=hour, minute=minute)
    return end_time.strftime("%Y-%m-%d %H:%M")


def retime(date, time):
    day, month, year = [int(a) for a in date.split("-")]
    hour, minute = [int(a) for a in time.split(".")]
    a = datetime.datetime(
        year=2000+int(year),
        month=month,
        day=day,
        hour=hour,
        minute=minute)
    rtn = a.strftime("%Y-%m-%d %H:%M")
    if not input(f"Detected end time {rtn}: "):
        return rtn
    return time()


def print_event(event):
    print("From", event["begin_time"], "to", event["end_time"])
    print(event["category"])
    if event["category"] != event["activity"]:
        print(event["activity"])
    if event["people"]:
        print("With", ", ".join(event["people"]))


def category(line):
    line = line.strip()
    categories = [
        "Sleep",
        "Shower",
        "Travel",
        "TV",
        "Research",
        "Coding",
        "Video Games",
        "Food",
        "Friends",
        "Reddit",
        "Youtube",
        "Shopping"
        ]
    print("\n".join(f"{i}. {s}" for i, s in enumerate(categories)))
    choice = input("Choose categories: ")
    cat = categories[int(choice)] if choice else "Misc"

    if cat in {"Sleep", "Shower", "Reddit"}:
        activity = cat
    elif line:
        activity = input(f"Activity ({line}): ") or cat
    else:
        activity = input(f"Activity: ") or cat

    people = []
    while cat not in {"Sleep", "Shower", "Reddit", "Youtube"}:
        person = input("Person: ").strip().title()
        if not person:
            break
        people.append(person)

    people = list(sorted(list(set(people))))
    return (cat, activity, people)


def add_item(line):
    with open("time_tracking.json", "r") as f:
        items = json.load(f)

    if len(items) == 0:
        new_entry = {}
        new_entry["end_time"] = "2020-01-01 00:00"
        new_entry["category"] = "N/A"
        new_entry["activity"] = "2019"
        items.append(new_entry)

    day, _, line = line.partition(" ")
    _time, _, line = line.partition(" ")

    last_entry = items[-1]
    print_event(last_entry)
    new_entry = {}
    new_entry["begin_time"] = last_entry["end_time"]
    if re.match(r"\d\d?-\d\d?-\d\d", day) and re.match(r"\d\d.\d\d", _time):
        try:
            new_entry["end_time"] = retime(day, _time)
        except Exception as e:
            print(str(e))
            new_entry["end_time"] = time()
    else:
        new_entry["end_time"] = time()
    if not new_entry["end_time"]:
        return
    new_entry["location"] = input("Location: ") or last_entry["location"]
    cat, activity, people = category(line)
    new_entry["category"] = cat
    new_entry["activity"] = activity
    new_entry["people"] = people

    items.append(new_entry)
    print_event(new_entry)

    with open("time_tracking.json", "w") as f:
        json.dump(items, f)


def main():
    HOME = os.environ["HOME"]
    os.chdir(HOME + "/git/personal_notes")
    git.pull()

    if len(sys.argv) > 1 and not sys.argv[1].startswith("-"):
        with open(sys.argv[1], "r") as f:
            for line in f:
                print(line, end="")
                add_item(line)
    elif len(sys.argv) > 1 and sys.argv[1] == "-d":
        for line in tt_dump():
            if line.strip():
                print(line, end="")
                add_item(line)
    else:
        add_item("")

    git.add("time_tracking.json")
    git.commit(m="time tracking update")
    git.push()


if __name__ == "__main__":
    main()
