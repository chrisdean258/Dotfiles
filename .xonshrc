#!/usr/bin/env python3
from xonsh.prompt.vc import dirty_working_directory as gdwd
from xonsh.prompt.vc import get_git_branch as gcb
from xonsh.tools import register_custom_style
from xonsh.pyghooks import color_by_name
from shlex import split, quote
from itertools import *
import subprocess
import random
import os
import sys
import re

$XONSH_SHOW_TRACEBACK = False
$CASE_SENSITIVE_COMPLETIONS = False
$ENABLE_VI_MODE = True
$COMPLETION_MODE = "menu-complete"
$AUTO_SUGGEST_IN_COMPLETIONS = True
$COMPLETIONS_CONFIRM = False

mystyle = {
    "Token.Comment": "ansicyan",
    "Token.Keyword": "ansibrightyellow",
    "Token.Keyword.Declaration": "nobold ansiyellow",
    "Token.Keyword.Namespace": "ansibrightblue",
    "Token.Keyword.Reserved": "ansiwhite",
    "Token.Keyword.Constant": "ansiwhite",
    "Token.Keyword": "ansiwhite",
    "Token.Literal.Number": "ansibrightmagenta",
    "Token.Literal.String": "ansibrightmagenta",
    "Token.Name.Class": "ansiwhite",
    "Token.Name.Function": "ansiwhite",
    "Token.Name.Namespace": "",
    "Token.Name.Builtin.Psuedo": "",
    "Token.Operator": "",
    "Token.Literal.String.Escape": "ansimagenta",
    "Token.Operator.Word": "ansired",
    "Token.PTK.CompletionMenu": "bg:",
    "Token.PTK.CompletionMenu.Completion": "ansigreen bg:",
    "Token.PTK.CompletionMenu.Completion.Current": "ansigreen bg:",
    "Token.Name.Builtin.Pseudo": "",
    "Token.Literal.String.Other": "",
}

register_custom_style("mystyle", mystyle)
$XONSH_COLOR_STYLE="mystyle"


if 'SSH_TTY' in ${...}:
    $HOME = $PWD
    $PROMPT = '{RED}{rv:[{}] }{RESET}{env_name}{BOLD_GREEN}{user}@{hostname}{RESET}:{BOLD_BLUE}{cwd}{GREEN}{curr_branch: ({})}{RESET}{prompt_end} '
else:
    $PROMPT = '{RED}{rv:[{}] }{RESET}{env_name}{BOLD_GREEN}{user}{RESET}:{BOLD_BLUE}{cwd}{GREEN}{curr_branch: ({})}{RESET}{prompt_end} '

$PROMPT_FIELDS["rv"] = lambda: __xonsh__.history and __xonsh__.history.rtns[-1] or None
$PROMPT_FIELDS['curr_branch'] = lambda: gcb() and (gcb() + "*" * (gdwd() or 0))

def readfile(fn, mode="r"):
    with open(fn, mode) as f:
        return f.read()

_d_nums = []
def _savesum(vals):
    global _d_nums
    _d_nums = list(vals)
    return sum(_d_nums)

def _what():
    global _d_nums
    return _d_nums

def _d_(num, die):
    return f"_savesum(random.choices(range(1, {die} + 1), k={num}))"

source-bash -s False --suppress-skip-message ~/.bash-completion.bash
$BASH_SOURCED = "yes"

@events.on_transform_command
def bash_preproc(cmd, **kw):
    inputs = lambda: [a["inp"] for a in __xonsh__.history.all_items()][::-1]
    prev = lambda pre: next((i for i in inputs() if i.startswith(pre)), "")
    transformations = {
        r"!!": lambda m: prev(""),
        r"!\$": lambda m: quote(split(prev(""))[-1]),
        r"!\^": lambda m: quote(split(prev(""))[0]),
        r"!\*": lambda m: " ".join(prev("")[1:]),
        r"!([\w]+)": lambda m: prev(m.group(1)),
        r"\$\?": lambda m: str(_.rtn),
        r"\$(\d)": lambda m: "$ARG" + m.group(1),
        r"\$\$": str(os.getpid()),
        r"\$\@": "$ARGS",
        r"\b(\d+)d(\d+)\b": lambda m: _d_(int(m.group(1)), int(m.group(2))),
        r"\bd(\d+)\b": lambda m: _d_(1, int(m.group(1))),
    }
    for expr, action in transformations.items():
        cmd = re.sub(expr, action, cmd)
    return cmd

jmp_cache = g`~/.cache/jmp/jmp`[0]
jump = False
expr = r".*"
@events.on_chdir
def record(olddir, newdir, **kw):
    global jump
    if olddir == newdir or jump:
        jump = False
        return
    ls
    with open(jmp_cache, "a") as f:
        print(newdir, file=f)

def _j(args):
    global jump
    global expr
    def cleanup():
        with open(jmp_cache, "r") as f:
            dirs = [l for l in f.readlines() if os.path.isdir(l.strip())]
        dirs = reversed(list(set(reversed(dirs))))
        with open(jmp_cache, "w") as f:
            print("".join(dirs), file=f)
    if args:
        expr = re.compile(r".*\/.*".join(args) + r"[^/]*$", flags=re.IGNORECASE)
    dirs = {l.strip() for l in readfile(jmp_cache).splitlines() if re.search(expr, l)}
    if $PWD in dirs and re.search(expr, $PWD):
        dirs = dropwhile(lambda a: a != $PWD, cycle(dirs))
        next(dirs, None)
    newdir = next(iter(dirs), None)
    if newdir and os.path.isdir(newdir):
        jump = True
        cd @(newdir)
    else:
        cleanup()


def _alias(arg):
    ret = 0
    if not arg:
        for alias, cmd in aliases.items():
            print("{}={}".format(alias, cmd))
    for a in arg:
        name, eq, alias = split(a)[0].partition("=")
        if eq == "=":
            aliases[name] = alias
        elif arg in aliases:
            print("{}={}".format(arg, aliases[arg]))
        else:
             print("alias: {}: not found".format(a))
             ret = 1
    return ret

def _ff(args):
    if args:
        file @(" ".join(args))
    else:
        file *


aliases["alias"] = _alias
aliases["j"] = _j
aliases["ff"] = _ff
aliases["what"] = lambda: print(_d_nums)

alias ls="ls --group-directories-first --color"
alias la="ls -la"
alias c="clear"
alias es="history flush; exec xonsh"
alias ..="cd .."
alias "-=cd -"
