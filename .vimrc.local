let g:imawimp = 1
let g:hllonglines = 1
let g:manage_sessions = 1
let g:auto_update = 0
let g:old_c_comments = 1
let g:md_format_para = 1
let g:use_syntastic = 0
let g:ale_fix_on_save = 1
let g:ale_lint_on_save = 1
let g:ale_lint_on_text_changed = 'never'
let g:ale_lint_on_insert_leave = 0
let g:ale_lint_on_enter = 0
let g:ale_rust_cargo_check_tests = 1
let g:ale_rust_cargo_check_examples = 1
let g:ale_fixers = {"rust": "rustfmt", "python": ["autopep8"]}
let g:ale_linters = {"python": ["flake8", "autoimport", "isort", "black"], "rust":["cargo"]}
nmap <silent> <C-k> <Plug>(ale_previous_wrap)
nmap <silent> <C-j> <Plug>(ale_next_wrap)


command! DndFixup :call DndFixup()
function! DndFixup()
	g/^\s*[-+]/normal! kJ
	%s/\([+-]\)\s*/\1/ge
endfunction

nnoremap <F10> :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<' . synIDattr(synID(line("."),col("."),0),"name") . "> lo<" . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"<CR>
au ColorScheme elflord hi! link ALEError Error
au ColorScheme elflord hi! link MarkDownError Normal

autocmd FileType c :setlocal commentstring=/*\ %s\ */

if $TERM =~ "^st"
  au ColorScheme elflord highlight Folded ctermfg=Black guifg=Black
  au ColorScheme elflord highlight Folded ctermfg=Black guifg=Black
  au ColorScheme elflord highlight Folded ctermfg=Black guifg=Black
  au ColorScheme elflord highlight Folded ctermfg=Black guifg=Black
endif
au ColorScheme elflord highlight tablinesel ctermfg=DarkGrey guifg=DarkGrey
au ColorScheme elflord highlight tabline ctermfg=black guifg=black
au VimResized * wincmd =
call HighLightSettings()

map H ^
map L $

nmap <leader>y "*y
vmap <leader>y "*y

function! RunSH()
	let line = getline('.')->trim(" \t$", 1)
	let idt = repeat(" ", indent('.'))
	call append(line('.'), map(systemlist(line), {_, v -> idt . v}))
endfunction


command! Run :call RunSH()

function! MDTemplate()
	call append(0, "# " .. expand("%:t:r")->tr('-_', '  ')->substitute('\<.', '\u&', "g"))
endfunction

au BufNewFile *.md :call MDTemplate()
