let g:imawimp = 1
let g:hllonglines = 1
let g:manage_sessions = 1
let g:auto_update = 0
let g:old_c_comments = 1
let g:md_format_para = 1
let g:use_syntastic = 0
let g:ale_fix_on_save = 1
let g:ale_lint_on_save = 1
let g:ale_lint_on_text_changed = 'never'
let g:ale_lint_on_insert_leave = 1
let g:ale_lint_on_enter = 0
let g:ale_rust_cargo_check_tests = 1
let g:ale_rust_cargo_check_examples = 1
let g:ale_fixers = {"rust": "rustfmt", "python": ["autopep8", "isort"], }
let g:ale_linters = {"python": ["flake8", "autoimport", "isort", "black"], "rust":["cargo"], "copper": ["copper"]}
let g:ale_rust_rustfmt_options = "--edition 2021"
let g:ale_rust_cargo_use_clippy = 1
let g:ale_rust_cargo_clippy_options = "-- -W clippy::pedantic -W clippy::nursery -W clippy::unwrap_used"
let g:ale_completion_enabled = 1
nmap <silent> <C-k> <Plug>(ale_previous_wrap)
nmap <silent> <C-j> <Plug>(ale_next_wrap)
let g:markdown_fenced_languages = ['css', 'erb=eruby', 'javascript', 'js=javascript', 'json=javascript', 'ruby', 'sass', 'xml', 'c', 'python', "copper", "go", "cpp", "typescript"]
:let g:netrw_browsex_viewer= "xdg-open"

set omnifunc=ale#completion#OmniFunc
highlight ColorColumn ctermbg=black
inoremap <expr> <C-tab>   CleverTab2()
function! CleverTab2() " {{{
	if pumvisible()
		return "\<C-N>"
	endif
	let l:str = LineBeforeCursor()
	let l:words = split(l:str, " ")
	let l:last_word = len(l:words) > 0 ? l:words[-1] : ""
	if l:str =~ '^\s*$'
		return "\<Tab>"
	elseif l:str =~ '\s$'
		return "\<Tab>"
	elseif l:str =~ '($'
		return ""
	elseif l:last_word =~ "\/" && len(glob(l:last_word . "*")) > 0 
		return "\<C-X>\<C-F>"
	elseif l:last_word =~ "^\/" && len(glob(l:last_word[1:] . "*")) > 0 
		" TODO flesh this out
		return "\<C-X>\<C-O>"
	endif
	return "\<C-X>\<C-O>"
endfunction " }}}


command! DndFixup :call DndFixup()
function! DndFixup()
	g/^\s*[-+]/normal! kJ
	%s/\([+-]\)\s*/\1/ge
endfunction

nnoremap <F10> :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<' . synIDattr(synID(line("."),col("."),0),"name") . "> lo<" . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"<CR>
au ColorScheme elflord hi! link ALEError Error
au ColorScheme elflord hi! link MarkDownError Normal

autocmd FileType c :setlocal commentstring=/*\ %s\ */
autocmd FileType markdown :vnoremap <localleader>s di[...SNIP...]<CR>
autocmd BufNewFile,Bufenter ~/.ssh/config.d/*  :setfiletype sshconfig

if $TERM =~ "^st"
  au ColorScheme elflord highlight Folded ctermfg=Black guifg=Black
  au ColorScheme elflord highlight Folded ctermfg=Black guifg=Black
  au ColorScheme elflord highlight Folded ctermfg=Black guifg=Black
  au ColorScheme elflord highlight Folded ctermfg=Black guifg=Black
endif
au ColorScheme elflord highlight tablinesel ctermfg=DarkGrey guifg=DarkGrey
au ColorScheme elflord highlight tabline ctermfg=black guifg=black

au ColorScheme elflord highlight Pmenu None
au ColorScheme elflord highlight PmenuSel None
au ColorScheme elflord highlight PmenuSbar None
au ColorScheme elflord highlight PmenuThumb None
if $TERM =~ "^st"
  au ColorScheme elflord highlight Pmenu ctermfg=0
  au ColorScheme elflord highlight PmenuSel ctermfg=darkgray
else
  au ColorScheme elflord highlight Pmenu ctermfg=darkgray
  au ColorScheme elflord highlight PmenuSel ctermfg=gray
endif

au VimResized * wincmd =
call HighLightSettings()

map H ^
map L $

nmap <leader>y "*y
vmap <leader>y "*y

function! RunSH()
	let line = getline('.')->trim(" \t$", 1)
	let idt = " "->repeat(indent('.'))
	call line('.')->append(systemlist(line)->map({_, v -> idt . v}))
endfunction


command! Run :call RunSH()

function! MDTemplate()
	let title = expand("%:t:r")->tolower()
	if title == "readme" || title == "notes"
		let title = expand("%:p:h:t")
	endif
	call append(0, "# " .. title->tr('-_', '  ')->substitute('\<.', '\u&', "g"))
endfunction

function! PythonMainAbbrev()
	if getline('.') =~ '^$'
		let return_lines = [ "import sys", "import argparse", "", "", "def main(argv):", "parser = argparse.ArgumentParser(description='')", "parser.add_argument('name', help='')", "args = parser.parse_args(argv[1:])", "return 0", "", "", "if __name__ == '__main__':", "sys.exit(main(sys.argv))", ]
		return join(return_lines, "\n")
	endif
	return 'main'
endfunction

function! FindLoc(loc_list, curpos)
	let ll =  a:loc_list->mapnew({i, v-> [i, v]})
	let [_, lnum, col, _, _] = a:curpos

	for [i, v] in ll
		if v.lnum == lnum
			return [i - 1, (i + 1) % len(ll)]
		elseif v.lnum > lnum
			return [i - 1, i]
		endif
	endfor
	return [-1, 0]
endfunction

"[{'lnum': 3, 'bufnr': 5, 'col': 1, 'pattern': '', 'valid': 1, 'vcol': 0, 'nr': -1, 'type': 'E', 'module': '', 'text': 'F821: undefined name ''skldjf'''}]
function! LocListNextWrap(offset)
	let loc_list = getloclist(0)
	if len(loc_list) == 0
		return
	endif
	let curpos = getcurpos()
	let [p, n] = FindLoc(loc_list, curpos)
	let selected = loc_list[a:offset < 0 ? p : n]
	if selected.lnum == line('.')
		call setpos('.', [0, selected.lnum + a:offset, selected.col, "^"])
		call LocListNextWrap(a:offset)
	else
		call setpos('.', [0, selected.lnum, selected.col, "^"])
endif
endfunction

command! Lnext :call LocListNextWrap(1)
command! Lprev :call LocListNextWrap(-1)
cabbrev lnext <C-R>=CommandLineStart("lnext", "Lnext")<CR>
cabbrev ln <C-R>=CommandLineStart("lnext", "Lnext")<CR>
cabbrev lprev <C-R>=CommandLineStart("lprev", "Lprev")<CR>
cabbrev lp <C-R>=CommandLineStart("lprev", "Lprev")<CR>

nnoremap <localleader>e :call LocListNextWrap(1)<CR>
nnoremap <localleader>E :call LocListNextWrap(-1)<CR>


au BufNewFile *.md :call MDTemplate()
let g:is_posix = 1

if $SSH_TTY != ""
	set lazyredraw
	set nottyfast
	set nofsync
endif

autocmd FileType copper :nnoremap <silent><buffer><localleader>s :call SplitIf()<CR>
autocmd FileType copper :nnoremap <silent><buffer>; :call AppendSemicolon()<CR>
autocmd FileType copper :inoremap <buffer><expr>{} Cbraces()
autocmd FileType copper :setlocal cindent
autocmd FileType copper :autocmd BufRead,BufWrite <buffer> :silent call RemoveTrailingWhitespace()

function! RemoveFile()
	let path = substitute(getline('.'), '\s*- \[.*\](\(.*\))', '\1', '')
	if isdirectory(path)
		call delete(path, "rf")
	elseif filereadable(path) 
		call delete(path)
	endif
	silent! call system("gen-index")
endfunction

function! Edit(file)
	if getline('.') =~ '^\s*- \[.*\](\(.*\))$'
		normal! $h
	endif
	e <cfile>
	silent! !mkdir -p %:h
	redraw!
endfunction

function! AutoLink()
	s/\([^"\[(]\)\(http\(s\)\?:.*\/\)\(\S*\)/\1[\4](\2\4)/ge
	s/\([^"\[(]\)\(http\(s\)\?:\S*\)/\1[\2]()/ge
	s/^\(http\(s\)\?:.*\/\)\(\S*\)/[\3](\1\3)/ge
	s/^http\(s\)\?:\S*/[&](&)/ge
	s/\[\](\(.*\)\/\([^\/]*\))/[\2](\1\/\2)/ge
	s/\[\](\(.\{-}\))/[\1](\1)/ge
endfunction

au FileType markdown nnoremap <silent><localleader>x :call RetainPosition({ -> setline('.', substitute(getline('.'), '\[ \]', '[x]', '')) })<CR>
au InsertLeave *.md :call RetainPosition(function("AutoLink"))

function! Notes()
	call chdir("~/.notes")
	setlocal nowrap
	autocmd FileChangedShell * let v:fcs_choice = "reload"
	silent! call system("gen-index")
	e
	au CursorHold,CursorHoldI * checktime
	au FocusGained,BufEnter,FocusLost * :checktime
	nnoremap <leader>dd :call RemoveFile()<CR>
	nnoremap gf :call Edit("<cfile>")<CR>
endfunction

function! TmuxNav(direction)
	let old = getwininfo(win_getid())[0]
	execute "wincmd " . a:direction
	let new = getwininfo(win_getid())[0]
	let pane_id = system('tmux display-message -p "#{pane_index}"')
	if $TMUX == "" 
	elseif a:direction == "w" && new.wincol <= old.wincol && new.winrow <= old.winrow
		call system('tmux select-pane -t :.+ &>/dev/null')
	elseif a:direction == "W" && new.wincol >= old.wincol && new.winrow >= old.winrow
		call system('tmux select-pane -t :.- &>/dev/null')
	endif
	if pane_id != system('tmux display-message -p "#{pane_index}"')
		redraw!
	endif
endfunction

nnoremap <silent><c-j> :call TmuxNav("w")<CR>
nnoremap <silent><c-k> :call TmuxNav("W")<CR>

let s:old_nu = "rnu"
function! Numbers()
	if &rnu && &nu
		let s:old_nu = "rnu"
		set nornu nu
	elseif &nu
		let s:old_nu = "nu"
	else
		let s:old_nu = ""
	endif
endfunction

function! NumbersRestore()
	if s:old_nu == "rnu"
		set nu rnu 
	elseif s:old_nu == "nu"
		set nornu nu 
	endif
endfunction

au FocusLost * :call Numbers()
au FocusGained * :call NumbersRestore()
