[1mdiff --git a/bash/bashrc b/bash/bashrc[m
[1mindex 59656ca..7694f2a 100644[m
[1m--- a/bash/bashrc[m
[1m+++ b/bash/bashrc[m
[36m@@ -141,8 +141,9 @@[m [mWHITE="\[`tput setaf 7`\]"[m
 BLACK="\[`tput setaf 8`\]"[m
 CLEAR="\[`tput sgr0`\]"[m
 [m
[31m-PATH=$PATH:$HOME/bin[m
[31m-PATH=$PATH:.[m
[32m+[m[32mexport PATH=$PATH:$HOME/bin[m
[32m+[m[32mexport PATH=$PATH:.[m
[32m+[m[32mexport EDITOR=vim[m
 set -o vi[m
 PROMPT_COMMAND=prompt_command[m
 PROMPT_SAVE=`echo $PS1 | sed 's/..$//g'`[m
[1mdiff --git a/universal/vimrc b/universal/vimrc[m
[1mindex d85900d..fa1ad33 100644[m
[1m--- a/universal/vimrc[m
[1m+++ b/universal/vimrc[m
[36m@@ -55,7 +55,7 @@[m
 	:set encoding=utf-8                      " use utf-8 everywhere[m
 	:set fileencoding=utf-8                  " use utf-8 everywhere[m
 	:set termencoding=utf-8                  " use utf-8 everywhere[m
[31m-	:set cinoptions=(8                       " indent 8 for every open paren[m
[32m+[m	[32m:set cinoptions=(8,N-s                   " indent 8 for every open paren[m
 	:setlocal complete-=t                    " Turn off completion using tag files for all except c/c++ projects[m
 	:set matchpairs+=<:>                     " adding a matched pair for highlighting and wrapping[m
 [m
[36m@@ -248,6 +248,7 @@[m
 			[m
 	" Commenting out lines[m
 	:nnoremap <silent><localleader>\ :call Comment()<CR>[m
[32m+[m	[32m:vnoremap <silent><localleader>\ :call Comment("visual")<CR>[m
 [m
 	" Paste mode[m
 	:nnoremap \p :set paste<CR>[m
[36m@@ -329,7 +330,7 @@[m
 	:augroup c_style[m
 	:  autocmd![m
 	":  autocmd FileType c,cpp,javascript,java,perl,cs :nnoremap <silent><buffer><localleader>\ :call CommentBL('\/\/')<CR>[m
[31m-	:  autocmd FileType c,cpp,javascript,java,perl,cs :setlocal commentstring=//%sS[m
[32m+[m	[32m:  autocmd FileType c,cpp,javascript,java,perl,cs :setlocal commentstring=//%s[m
 	:  autocmd FileType c,cpp,javascript,java,perl,cs :nnoremap <silent><buffer><localleader>s :silent call SplitIf()<CR>[m
 	:  autocmd FileType c,cpp,javascript,java,perl,cs :nnoremap <silent><buffer>; :call AppendSemicolon()<CR>[m
 	:  autocmd FileType c,cpp,javascript,java,perl,cs :inoremap <buffer>{} {<CR>}<esc>O[m
[36m@@ -488,6 +489,13 @@[m
 	:augroup END[m
 	" }}}[m
 [m
[32m+[m	[32m" LD[m
[32m+[m	[32m" {{{[m
[32m+[m	[32m:augroup ld[m
[32m+[m	[32m:  autocmd FileType ld :inoremap <buffer>{} {<CR>}<esc>O[m
[32m+[m	[32m:augroup END[m
[32m+[m	[32m" }}}[m
[32m+[m
 " {{{[m
 :endif[m
 " }}}[m
[36m@@ -719,14 +727,14 @@[m
 [m
 		:function! HighlightAfterColumn(col)[m
 		" {{{[m
[31m-		:  let s:longlinematches = get(s:, 'longlinematches', [])[m
[31m-		:  for match in s:longlinematches[m
[31m-		:    call matchdelete(match)[m
[32m+[m		[32m:  for match in getmatches()[m
[32m+[m		[32m:    if match["group"] ==? "LongLine"[m
[32m+[m		[32m:      call matchdelete(match["id"])[m
[32m+[m		[32m:    endif[m
 		:  endfor[m
 		:  let s:longlinematches = [][m
 		:  if get(g:, "hllonglines", 1) && getline('.') !~ 'printf' && getline('.') !~ '[^=]*<<[^=]*'[m
[31m-		:    let l:match = matchadd('LongLine', '\%'.line('.').'l\%>'.(a:col).'v.')[m
[31m-		:    call add(s:longlinematches, l:match)[m
[32m+[m		[32m:    call matchadd('LongLine', '\%'.line('.').'l\%>'.(a:col).'v.')[m
 		:  endif[m
 		:endfunction[m
 		" }}}[m
[36m@@ -790,12 +798,18 @@[m
 	" Universally used function[m
 	" {{{[m
 [m
[31m-		:function! Comment() range[m
[32m+[m		[32m:function! Comment(...) range[m
 		" {{{[m
[32m+[m		[32m:  let l:window = winsaveview()[m
[32m+[m		[32m:  if get(a:, 1, "") ==# 'visual'[m
[32m+[m		[32m:    let l:num = line("'<") - line("'>") + 1[m
[32m+[m		[32m:    exec "normal '<" . l:num .'\\'[m
[32m+[m		[32m:    call winrestview(l:window)[m
[32m+[m		[32m:    return[m
[32m+[m		[32m:  endif[m
 		:  let l:temp = split(&commentstring, "%s")[m
 		:  let l:start = escape(get(l:temp, 0, ""), '\*/!')[m
 		:  let l:end = escape(get(l:temp, 1, ""), '\*/!')[m
[31m-		:  let l:window = winsaveview()[m
 		:  if l:end ==# ""[m
 		:    execute "silent ".a:firstline.",".a:lastline.'s:^\(\s*\)\(.\):\1'.l:start.'\2:e'[m
 		:    execute "silent ".a:firstline.",".a:lastline.'s:^\(\s*\)'.l:start.l:start.':\1:e'[m
[36m@@ -1057,8 +1071,8 @@[m
 		:  if !get(g:, 'buffcmds', 1)[m
 		:    return[m
 		:  endif[m
[31m-		:  exec (&columns / 20).'wincmd >'[m
[31m-		:  exec (&lines / 20).'wincmd +'[m
[32m+[m		[32m:  exec (10+&columns / 20).'wincmd >'[m
[32m+[m		[32m:  exec (10+&lines / 20).'wincmd +'[m
 		:  if get(b:, 'relativenumber', &relativenumber)[m
 		:    setlocal relativenumber[m
 		:  endif[m
[36m@@ -1070,8 +1084,8 @@[m
 		:  if !get(g:, 'buffcmds', 1)[m
 		:    return[m
 		:  endif[m
[31m-		:  exec (&columns / 20).'wincmd <'[m
[31m-		:  exec (&lines / 20).'wincmd -'[m
[32m+[m		[32m:  exec (10+&columns / 20).'wincmd <'[m
[32m+[m		[32m:  exec (10+&lines / 20).'wincmd -'[m
 		:  if bufname("%") =~ "^!"[m
 		" :    exec 'resize '.(winline() / 10 + 10)[m
 		:  endif[m
